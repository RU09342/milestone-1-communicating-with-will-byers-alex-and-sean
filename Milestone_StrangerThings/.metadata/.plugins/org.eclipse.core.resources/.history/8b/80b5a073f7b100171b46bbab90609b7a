
#include <msp430.h>

 // Initial Greeting you should see upon properly connecting your Launchpad
int i = 0;
volatile int count = 0;
volatile int BitRX = 0;
int main(void)
{

    WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT


    P3SEL = BIT3+BIT4;                        // P3.4,5 = USCI_A0 TXD/RXD
    UCA0CTL1 |= UCSWRST;                      // **Put state machine in reset**
    UCA0CTL1 |= UCSSEL_2;                     // SMCLK
    UCA0BR0 = 6;                              // 1MHz 9600 (see User's Guide)
    UCA0BR1 = 0;                              // 1MHz 9600
    UCA0MCTL = UCBRS_0 + UCBRF_13 + UCOS16;   // Modln UCBRSx=0, UCBRFx=0,
                                              // over sampling
    UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
    UCA0IE |= UCRXIE;                         // Enable USCI_A0 RX interrupt
    /*
    P3SEL |= BIT3+BIT4;                       // P3.3,4 = USCI_A0 TXD/RXD
    UCA0CTL1 |= UCSWRST;                      // **Put state machine in reset**
    UCA0CTL1 |= UCSSEL_2;                     // SMCLK
    UCA0BR0 = 6;                              // 1MHz 115200 (see User's Guide)
    UCA0BR1 = 0;                              // 1MHz 115200
    UCA0MCTL |= UCBRS_1 + UCBRF_0;            // Modulation UCBRSx=1, UCBRFx=0
    UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
    UCA0IE |= UCRXIE;                         // Enable USCI_A0 RX interrupt
*/
    //Initialize LEDs for pwm
        P1DIR |= 0x0D;  //LEDs set as output
        P1SEL |= 0x0D;  //LEDs set to TA0.1/2/3

    //Set up CCRs for clock count and pwm control
        TA0CCR0  = 0x00FF;
        TA0CCTL1 = OUTMOD_7;
        TA0CCR1 = 0;
        TA0CCTL2 = OUTMOD_7;
        TA0CCR2  = 0;
        TA0CCTL3 = OUTMOD_7;
        TA0CCR3 = 0;
        TA0CTL = TASSEL_2 + MC_1 + ID_3;
    __bis_SR_register(LPM0_bits + GIE);       // Enter LPM0, interrupts enabled
    __no_operation();                         // For debugger


}

// Echo back RXed character, confirm TX buffer is ready first
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_A0_VECTOR))) USCI_A0_ISR (void)
#else
#error Compiler not supported!
#endif
{
    switch(__even_in_range(UCA0IV,USCI_UCTXIFG)){

        case USCI_NONE: break;

        case USCI_UCRXIFG:
            switch (count){

                case 0:
                    while(!(UCA0IFG & UCTXIFG));
                    BitRX = UCA0RXBUF;
                    UCA0TXBUF = UCA0RXBUF - 0x0003;
                    __no_operation();
                    break;

                case 1:
                    TA0CCR1 = (UCA0RXBUF);
                    break;

                case 2 :
                    TA0CCR2 = (UCA0RXBUF);
                    break;

                case 3 :
                    TA0CCR3 = (UCA0RXBUF);
                     break;

                default:
                    while(!(UCA0IFG & UCTXIFG));
                    UCA0TXBUF = UCA0RXBUF;
            }

            if(count != BitRX){
                count += 1;
             } else if (count == BitRX){
                 UCA0CTL1 |= UCSWRST;

                        }
                break;
             case USCI_UCTXIFG : break;
             default: break;
                }
            }


